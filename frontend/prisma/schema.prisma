generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model goose_db_version {
  id         BigInt    @id @unique(map: "id") @default(autoincrement()) @db.UnsignedBigInt
  version_id BigInt
  is_applied Boolean
  tstamp     DateTime? @default(now()) @db.Timestamp(0)
}

model refresh_tokens {
  id          BigInt   @id @unique(map: "id") @default(autoincrement()) @db.UnsignedBigInt
  user_id     String?  @db.Char(36)
  instance_id String?  @default("000-000-000") @db.VarChar(255)
  token       String?  @db.VarChar(255)
  session_id  Int
  revoked     Boolean? @default(false)
  parent      String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
  sessions    sessions @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "refresh_tokens_ibfk_1")

  @@index([session_id], map: "session_id")
}

model sessions {
  id             Int              @id @default(autoincrement())
  user_id        String           @db.Char(36)
  not_after      DateTime?        @db.Timestamp(0)
  refreshed_at   DateTime?        @db.Timestamp(0)
  user_agent     String           @db.VarChar(255)
  ip             String?          @db.VarChar(255)
  tag            String?          @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  id                   String     @id @db.Char(36)
  created_at           DateTime?
  updated_at           DateTime?
  instance_id          String     @db.LongText
  aud                  String     @db.LongText
  role                 String     @db.LongText
  email                String     @unique(map: "email") @db.VarChar(255)
  encrypted_password   String     @db.VarChar(255)
  email_confirmed_at   DateTime?  @db.Timestamp(0)
  confirmation_token   String?    @db.VarChar(255)
  confirmation_sent_at DateTime?  @db.Timestamp(0)
  recovery_token       String?    @db.VarChar(255)
  recovery_sent_at     DateTime?  @db.Timestamp(0)
  last_sign_in_at      DateTime?  @db.Timestamp(0)
  banned_until         DateTime?  @db.Timestamp(0)
  deleted_at           DateTime?
  sessions             sessions[]
}
